#include <cstdio>
#include <iostream>
#include <fstream>
#ifdef __TRAIN__
#include "sheep_600_404.c"
#define WIDTH 600
#define HEIGH 404
#define X_STRIDE 10
#define Y_STRIDE 10
#else //__VERI__
#include "waterfall_600_400.c"
#define WIDTH 600
#define HEIGH 400
#define X_STRIDE 5
#define Y_STRIDE 2
#endif
#define PAD 2 // left right pad 
//#include <opencv2/opencv.hpp>


unsigned short div_table[1024] = { 0,0,21845,0,13107,43690,18724,0,50972,39321,29789,21845,15123,9362,4369,0,61680,58254,55188,52428,49932,47662,45590,43690,41943,40329,38836,37449,36157,34952,33825,32768,31775,30840,29959,29127,28339,27594,26886,26214,25575,24966,24385,23831,23301,22795,22310,21845,21399,20971,20560,20164,19784,19418,19065,18724,18396,18078,17772,17476,17189,16912,16644,16384,16131,15887,15650,15420,15196,14979,14768,14563,14364,14169,13981,13797,13617,13443,13273,13107,12945,12787,12633,12483,12336,12192,12052,11915,11781,11650,11522,11397,11275,11155,11037,10922,10810,10699,10591,10485,10381,10280,10180,10082,9986,9892,9799,9709,9619,9532,9446,9362,9279,9198,9118,9039,8962,8886,8811,8738,8665,8594,8525,8456,8388,8322,8256,8192,8128,8065,8004,7943,7884,7825,7767,7710,7653,7598,7543,7489,7436,7384,7332,7281,7231,7182,7133,7084,7037,6990,6944,6898,6853,6808,6765,6721,6678,6636,6594,6553,6512,6472,6432,6393,6355,6316,6278,6241,6204,6168,6132,6096,6061,6026,5991,5957,5924,5890,5857,5825,5793,5761,5729,5698,5667,5637,5607,5577,5548,5518,5489,5461,5433,5405,5377,5349,5322,5295,5269,5242,5216,5190,5165,5140,5115,5090,5065,5041,5017,4993,4969,4946,4922,4899,4877,4854,4832,4809,4788,4766,4744,4723,4702,4681,4660,4639,4619,4599,4578,4559,4539,4519,4500,4481,4462,4443,4424,4405,4387,4369,4350,4332,4315,4297,4279,4262,4245,4228,4211,4194,4177,4161,4144,4128,4112,4096,4080,4064,4048,4032,4017,4002,3986,3971,3956,3942,3927,3912,3898,3883,3869,3855,3840,3826,3813,3799,3785,3771,3758,3744,3731,3718,3705,3692,3679,3666,3653,3640,3628,3615,3603,3591,3578,3566,3554,3542,3530,3518,3506,3495,3483,3472,3460,3449,3437,3426,3415,3404,3393,3382,3371,3360,3350,3339,3328,3318,3307,3297,3287,3276,3266,3256,3246,3236,3226,3216,3206,3196,3187,3177,3167,3158,3148,3139,3130,3120,3111,3102,3093,3084,3075,3066,3057,3048,3039,3030,3021,3013,3004,2995,2987,2978,2970,2962,2953,2945,2937,2928,2920,2912,2904,2896,2888,2880,2872,2864,2857,2849,2841,2833,2826,2818,2811,2803,2796,2788,2781,2774,2766,2759,2752,2744,2737,2730,2723,2716,2709,2702,2695,2688,2681,2674,2668,2661,2654,2647,2641,2634,2628,2621,2614,2608,2601,2595,2589,2582,2576,2570,2563,2557,2551,2545,2538,2532,2526,2520,2514,2508,2502,2496,2490,2484,2478,2473,2467,2461,2455,2449,2444,2438,2432,2427,2421,2416,2410,2404,2399,2394,2388,2383,2377,2372,2366,2361,2356,2351,2345,2340,2335,2330,2325,2319,2314,2309,2304,2299,2294,2289,2284,2279,2274,2269,2264,2259,2255,2250,2245,2240,2235,2231,2226,2221,2216,2212,2207,2202,2198,2193,2189,2184,2179,2175,2170,2166,2162,2157,2153,2148,2144,2139,2135,2131,2126,2122,2118,2114,2109,2105,2101,2097,2092,2088,2084,2080,2076,2072,2068,2064,2060,2056,2052,2048,2044,2040,2036,2032,2028,2024,2020,2016,2012,2008,2004,2001,1997,1993,1989,1985,1982,1978,1974,1971,1967,1963,1959,1956,1952,1949,1945,1941,1938,1934,1931,1927,1923,1920,1916,1913,1909,1906,1903,1899,1896,1892,1889,1885,1882,1879,1875,1872,1869,1865,1862,1859,1855,1852,1849,1846,1842,1839,1836,1833,1829,1826,1823,1820,1817,1814,1811,1807,1804,1801,1798,1795,1792,1789,1786,1783,1780,1777,1774,1771,1768,1765,1762,1759,1756,1753,1750,1747,1744,1741,1738,1736,1733,1730,1727,1724,1721,1718,1716,1713,1710,1707,1705,1702,1699,1696,1693,1691,1688,1685,1683,1680,1677,1675,1672,1669,1667,1664,1661,1659,1656,1653,1651,1648,1646,1643,1640,1638,1635,1633,1630,1628,1625,1623,1620,1618,1615,1613,1610,1608,1605,1603,1600,1598,1596,1593,1591,1588,1586,1583,1581,1579,1576,1574,1572,1569,1567,1565,1562,1560,1558,1555,1553,1551,1548,1546,1544,1542,1539,1537,1535,1533,1530,1528,1526,1524,1521,1519,1517,1515,1513,1510,1508,1506,1504,1502,1500,1497,1495,1493,1491,1489,1487,1485,1483,1481,1478,1476,1474,1472,1470,1468,1466,1464,1462,1460,1458,1456,1454,1452,1450,1448,1446,1444,1442,1440,1438,1436,1434,1432,1430,1428,1426,1424,1422,1420,1418,1416,1415,1413,1411,1409,1407,1405,1403,1401,1399,1398,1396,1394,1392,1390,1388,1387,1385,1383,1381,1379,1377,1376,1374,1372,1370,1368,1367,1365,1363,1361,1360,1358,1356,1354,1353,1351,1349,1347,1346,1344,1342,1340,1339,1337,1335,1334,1332,1330,1328,1327,1325,1323,1322,1320,1318,1317,1315,1314,1312,1310,1309,1307,1305,1304,1302,1300,1299,1297,1296,1294,1292,1291,1289,1288,1286,1285,1283,1281,1280,1278,1277,1275,1274,1272,1271,1269,1267,1266,1264,1263,1261,1260,1258,1257,1255,1254,1252,1251,1249,1248,1246,1245,1243,1242,1240,1239,1237,1236,1235,1233,1232,1230,1229,1227,1226,1224,1223,1222,1220,1219,1217,1216,1215,1213,1212,1210,1209,1208,1206,1205,1203,1202,1201,1199,1198,1197,1195,1194,1192,1191,1190,1188,1187,1186,1184,1183,1182,1180,1179,1178,1176,1175,1174,1172,1171,1170,1168,1167,1166,1165,1163,1162,1161,1159,1158,1157,1156,1154,1153,1152,1151,1149,1148,1147,1145,1144,1143,1142,1140,1139,1138,1137,1136,1134,1133,1132,1131,1129,1128,1127,1126,1125,1123,1122,1121,1120,1119,1117,1116,1115,1114,1113,1111,1110,1109,1108,1107,1106,1104,1103,1102,1101,1100,1099,1097,1096,1095,1094,1093,1092,1091,1089,1088,1087,1086,1085,1084,1083,1082,1081,1079,1078,1077,1076,1075,1074,1073,1072,1071,1069,1068,1067,1066,1065,1064,1063,1062,1061,1060,1059,1058,1057,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1036,1035,1034,1033,1032,1031,1030,1029,1028,1027,1026,1025 };
extern "C" unsigned char apply_fixed_bilateral_filter(unsigned char source1[5][5], unsigned char source2[5][5],int sigma_i, int sigma_s, unsigned short div[1024], unsigned char point);
#include "funcinfo.h"
#include "trace.h"
int main(int argc, char** argv)
{
	unsigned char src[5][5];
	unsigned char filered_image[HEIGH][WIDTH];
  unique_ptr<FuncInfo> finfo=buildFuncInfo("bbInfo.txt",argv[1],"pipeline.txt");
  TraceSim::simulator=std::move(buildTraceSim(finfo,argv[2]));
	//cv::Mat filtered_image_mat= cv::Mat::zeros(HEIGH, WIDTH, CV_64F);
#ifdef _INV_MODEL_
  set_operators(7); // mamually annotate it 
#endif
	for (int i = 0; i < HEIGH; i+=Y_STRIDE)
	{
		for (int j = 0; j < WIDTH; j+=X_STRIDE)
		{
			// read image
			for (int k = 0; k < 5; k++)
			{
				for (int l = 0; l < 5; l++)
				{
					
					src[k][l] = image[(i + k) * (WIDTH+PAD*2) + j + l]; // take account padding!
				}
			}
			// test
			filered_image[i][j] = apply_fixed_bilateral_filter(src, src, 4, 4, div_table,src[2][2]);
	//		filtered_image_mat.at<double>(i, j) = filered_image[i][j];
#ifdef _INV_MODEL_
    // place for end of inv
    inv_end();
#endif
		}
	}
	//cv::imwrite("filtered_image_own.bmp", filtered_image_mat);
	return 0;
}
